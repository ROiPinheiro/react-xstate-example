{"version":3,"sources":["components/Toggle/machine.js","components/Toggle/styles.js","components/Toggle/index.js","components/RedditPosts/machine.js","services/api.js","components/RedditPosts/styles.js","components/RedditPosts/index.js","styles/global.js","App.js","index.js"],"names":["toggleMachine","Machine","id","initial","states","inactive","on","TOGGLE","active","Container","styled","div","Card","motion","props","Toggle","useMachine","current","send","matches","onClick","whileHover","y","x","zoom","transition","ease","redditMachine","context","subreddit","posts","idle","selected","loading","invoke","src","fetch","then","response","json","data","children","map","child","onDone","target","actions","assign","event","onError","loaded","failed","SELECT","name","List","ul","ListItem","li","color","subreddits","list","opacity","final","delay","when","staggerChildren","listItem","RedditPosts","onChange","e","value","key","variants","animate","post","title","Math","random","toString","substr","scale","borderRadius","GlobalStyle","createGlobalStyle","require","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dae9182b.chunk.js","sourcesContent":["import { Machine } from \"xstate\";\n\nexport const toggleMachine = Machine({\n  id: \"toggle\",\n  initial: \"inactive\",\n  states: {\n    inactive: {\n      on: { TOGGLE: \"active\" },\n    },\n    active: {\n      on: { TOGGLE: \"inactive\" },\n    },\n  },\n});\n","import styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\n\nexport const Container = styled.div``;\n\nexport const Card = styled(motion.div)`\n  height: 200px;\n  width: 750px;\n  border-radius: 15px;\n  box-shadow: 0 3px 5px 0 #33333355;\n  background-color: ${(props) => (props.active ? \"#1ff\" : \"#f1f\")};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  font-size: 45px;\n  cursor: pointer;\n`;\n","import React from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport { toggleMachine } from \"./machine\";\nimport { Container, Card } from \"./styles\";\n\nexport default function Toggle() {\n  const [current, send] = useMachine(toggleMachine);\n\n  return (\n    <Container>\n      <Card\n        active={current.matches(\"inactive\")}\n        onClick={() => send(\"TOGGLE\")}\n        whileHover={{ y: 50, x: 50, zoom: 1.1 }}\n        transition={{ ease: \"easeOut\" }}\n      >\n        Click me\n      </Card>\n    </Container>\n  );\n}\n","import { Machine, assign } from \"xstate\";\nimport { invokeFetchSubreddit } from \"../../services/api\";\n\nexport const redditMachine = Machine({\n  id: \"reddit\",\n  initial: \"idle\",\n  context: {\n    subreddit: null,\n    posts: null,\n  },\n  states: {\n    idle: {},\n    selected: {\n      initial: \"loading\",\n      states: {\n        loading: {\n          invoke: {\n            id: \"fetch-subreddit\",\n            src: invokeFetchSubreddit,\n            onDone: {\n              target: \"loaded\",\n              actions: assign({\n                posts: (context, event) => event.data,\n              }),\n            },\n            onError: \"failed\",\n          },\n        },\n        loaded: {},\n        failed: {},\n      },\n    },\n  },\n  on: {\n    SELECT: {\n      target: \".selected\",\n      actions: assign({\n        subreddit: (context, event) => event.name,\n      }),\n    },\n  },\n});\n","export function invokeFetchSubreddit(context) {\n  const { subreddit } = context;\n\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n    .then((response) => response.json())\n    .then((json) => json.data.children.map((child) => child.data));\n}\n","import styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\n\nexport const Container = styled.div``;\n\nexport const List = styled(motion.ul)`\n  padding: 10px;\n  background-color: #333;\n  max-width: 1000px;\n  margin: auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-gap: 10px;\n  min-height: 700px;\n  flex-direction: column;\n  border-radius: 5px;\n  list-style: none;\n`;\n\nexport const ListItem = styled(motion.li)`\n  background-color: ${(props) => props.color};\n  padding: 10px;\n  margin: 2px;\n  border-radius: 5px;\n  min-width: 50px;\n  width: 100%;\n  min-height: 150px;\n  list-style: none;\n`;\n","import React from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport { redditMachine } from \"./machine\";\nimport { List, ListItem } from \"./styles\";\n\nconst subreddits = [\"frontend\", \"backend\", \"vuejs\"];\n\nconst list = {\n  initial: {\n    opacity: 0,\n  },\n  final: {\n    opacity: 1,\n    transition: {\n      delay: 1,\n      when: \"beforeChildren\",\n      staggerChildren: 0.1,\n    },\n  },\n};\n\nconst listItem = {\n  initial: {\n    opacity: 0,\n    x: -10,\n  },\n  final: {\n    opacity: 1,\n    x: 0,\n  },\n};\n\nexport default function RedditPosts() {\n  const [current, send] = useMachine(redditMachine);\n  const { subreddit, posts } = current.context;\n\n  function generateRandomColor() {\n    return \"#\" + Math.random().toString(16).substr(-6);\n  }\n\n  return (\n    <main>\n      <header>\n        <select\n          onChange={(e) => {\n            send(\"SELECT\", { name: e.target.value });\n          }}\n        >\n          {subreddits.map((subreddit) => (\n            <option key={subreddit}>{subreddit}</option>\n          ))}\n        </select>\n      </header>\n      <section>\n        <h1>{current.matches(\"idle\") ? \"Select a subreddit\" : subreddit}</h1>\n        {current.matches({ selected: \"loading\" }) && <div>Loading...</div>}\n        {current.matches({ selected: \"loaded\" }) && (\n          <List variants={list} initial=\"initial\" animate=\"final\">\n            {posts.map((post) => (\n              <ListItem\n                variants={listItem}\n                key={post.title}\n                color={generateRandomColor()}\n                whileHover={{ scale: 1.2, borderRadius: 5 }}\n              >\n                {post.title}\n              </ListItem>\n            ))}\n          </List>\n        )}\n      </section>\n    </main>\n  );\n}\n","const { createGlobalStyle } = require(\"styled-components\");\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: sans-serif\n  }\n`;\n","import React from \"react\";\nimport Toggle from \"./components/Toggle\";\nimport RedditPosts from \"./components/RedditPosts\";\nimport { GlobalStyle } from \"./styles/global\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <RedditPosts />\n      <Toggle />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}